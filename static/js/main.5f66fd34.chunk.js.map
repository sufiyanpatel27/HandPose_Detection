{"version":3,"sources":["drawHand.js","App.js","reportWebVitals.js","index.js"],"names":["fingerJoints","thumb","indexFinger","middleFinger","ringFinger","pinky","drawHand","predictions","ctx","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill","App","webcamRef","useRef","canvasRef","a","handpose","model","console","log","setInterval","detect","runHandpose","current","video","readyState","videoWidth","videoHeight","width","height","estimateHands","hand","getContext","className","ref","style","position","marginLeft","marginRight","left","right","textAlign","zindex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f66fd34.chunk.js","sourcesContent":["\r\nconst fingerJoints = {\r\n    thumb: [0, 1, 2, 3, 4],\r\n    indexFinger: [0, 5, 6, 7, 8],\r\n    middleFinger: [0, 9, 10, 11, 12],\r\n    ringFinger: [0, 13, 14, 15, 16],\r\n    pinky: [0, 17, 18, 19, 20],\r\n};\r\n\r\n\r\n\r\n\r\nexport const drawHand = (predictions, ctx) => {\r\n\r\n    if (predictions.length > 0) {\r\n        predictions.forEach((prediction) => {\r\n            const landmarks = prediction.landmarks;\r\n\r\n            for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\r\n                let finger = Object.keys(fingerJoints)[j];\r\n                for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\r\n                    const firstJointIndex = fingerJoints[finger][k];\r\n                    const secondJointIndex = fingerJoints[finger][k + 1];\r\n\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(\r\n                        landmarks[firstJointIndex][0],\r\n                        landmarks[firstJointIndex][1]\r\n                    );\r\n                    ctx.lineTo(\r\n                        landmarks[secondJointIndex][0],\r\n                        landmarks[secondJointIndex][1]\r\n                    );\r\n                    ctx.strokeStyle = 'plum';\r\n                    ctx.lineWidth = 4;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < landmarks.length; i++) {\r\n                const x = landmarks[i][0]\r\n\r\n                const y = landmarks[i][1]\r\n\r\n                ctx.beginPath();\r\n                ctx.arc(x, y, 5, 0, 3 * Math.PI);\r\n\r\n                ctx.fillStyle = 'aqua';\r\n                ctx.fill();\r\n            }\r\n        })\r\n    }\r\n}","import React, { useRef } from 'react';\n\n//importing tensorflow libraries\nimport * as tf from '@tensorflow/tfjs';\nimport * as handpose from '@tensorflow-models/handpose';\n\n//importing webcam library\nimport Webcam from 'react-webcam';\n\n//importing drawHand from utilities for drawing the pose\nimport { drawHand } from './drawHand'\n\n//style\nimport './App.css';\n\nfunction App() {\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runHandpose = async () => {\n    const model = await handpose.load()\n    console.log('Handpose model loaded.');\n    setInterval(() => {\n      detect(model)\n    }, 10)\n  };\n\n  runHandpose();\n\n  const detect = async (model) => {\n    if (\n      typeof webcamRef.current !== 'undefined' &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      const hand = await model.estimateHands(video);\n      console.log(hand);\n\n      const ctx = canvasRef.current.getContext('2d');\n      drawHand(hand, ctx);\n    }\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: 'absolute',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            left: 0,\n            right: 0,\n            textAlign: 'center',\n            zindex: 9,\n            width: 933.33,\n            height: 700\n          }} />\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: 'absolute',\n            marginLeft: 'auto',\n            marginRight: 'auto',\n            left: 0,\n            right: 0,\n            textAlign: 'center',\n            zindex: 9,\n            width: 933.33,\n            height: 700,\n          }} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}